import random
import time
import pickle
import os
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)

TOKEN = "7612547079:AAEzbQEcHRD4dprHogr5JLY5ScOEoCCjT8o"
DATA_FILE = "user_data.pkl"
SELECT_ITEM, ENTER_TRADE_LINK, ENTER_DEPOSIT_AMOUNT, SELL_ITEMS, SELL_SELECTED, WAITING_DEPOSIT_AMOUNT, WAITING_SUPPORT_MESSAGE = range(7)
ADMIN_ID = 1473801995

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'rb') as f:
                return pickle.load(f)
        except:
            pass
    return {'users_db': {}, 'trade_links': {}, 'last_daily_bonus': {}}

def save_data(data):
    with open(DATA_FILE, 'wb') as f:
        pickle.dump(data, f)

data = load_data()
users_db = data['users_db']
TRADE_LINK = data['trade_links']
LAST_DAILY_BONUS = data['last_daily_bonus']

RARITY_COMMON = "üîπ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
RARITY_MILSPEC = "üîπ –ê—Ä–º–µ–π—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
RARITY_RESTRICTED = "üü™ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ"
RARITY_CLASSIFIED = "üü™ –ó–∞—Å–µ–∫—Ä–µ—á–µ–Ω–Ω–æ–µ"
RARITY_COVERT = "‚ô¶Ô∏è –¢–∞–π–Ω–æ–µ"
RARITY_RARE = "üî∂ –ö—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–Ω–æ–µ"

RARITIES = {
    RARITY_COMMON: {"chance": 50.0, "multiplier": 1},
    RARITY_MILSPEC: {"chance": 30.0, "multiplier": 1},
    RARITY_RESTRICTED: {"chance": 10.0, "multiplier": 1},
    RARITY_CLASSIFIED: {"chance": 5.0, "multiplier": 1},
    RARITY_COVERT: {"chance": 1.0, "multiplier": 1},
    RARITY_RARE: {"chance": 0.89, "value_mult": 1}
}

async def forward_to_admin(context: ContextTypes.DEFAULT_TYPE, user_id: int, text: str):
    try:
        await context.bot.send_message(
            chat_id=1473801995,
            text=f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{text}",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if 'last_drop_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['last_drop_id']
            )
        except:
            pass
    await start(update, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_db:
        users_db[user_id] = {"balance": 1000, "inventory": []}
        save_data(data)
    keyboard = [
        [InlineKeyboardButton("üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å", callback_data='select_case')],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
         InlineKeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data='inventory')],
        [InlineKeyboardButton("üì§ –í—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data='withdraw_items')],
        [InlineKeyboardButton("üé∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data='daily_bonus')],
        [InlineKeyboardButton("üÜò –û –±–æ—Ç–µ", callback_data='help')],
    ]
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üî´ CS2 SKIN-HUNTER BOT\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']}‚ÇΩ\n"
            f"üì¶ –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {len(users_db[user_id]['inventory'])}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            "üî´ CS2 Case Bot\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']}‚ÇΩ\n"
            f"üì¶ –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {len(users_db[user_id]['inventory'])}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
async def select_case(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–ì—Ä–µ–∑—ã –∏ –∫–æ—à–º–∞—Ä—ã (300‚ÇΩ)", callback_data='open_case_–ì—Ä–µ–∑—ã –∏ –∫–æ—à–º–∞—Ä—ã (300‚ÇΩ)')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    await query.edit_message_text("üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

async def cancel_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop('current_handler', None)
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif update.message:
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def process_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = int(update.message.text.strip())
        user_id = update.effective_user.id
        if amount < 10:
            await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 10‚ÇΩ")
            return ENTER_DEPOSIT_AMOUNT
        if amount > 100000:
            await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 100000‚ÇΩ")
            return ENTER_DEPOSIT_AMOUNT
        users_db[user_id]["balance"] += amount
        save_data(data)
        await update.message.reply_text(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']}‚ÇΩ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_menu')]
            ])
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='balance')]
            ])
        )
        return ENTER_DEPOSIT_AMOUNT

def create_deposit_handler():
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(deposit_start, pattern='^deposit$')],
        states={
            WAITING_DEPOSIT_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_deposit)
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_operation),
            CallbackQueryHandler(cancel_operation, pattern='^cancel_operation$')
        ],
        map_to_parent={ConversationHandler.END: ConversationHandler.END},
        per_message=True
    )

create_support_handler():
    return ConversationHandler(
        entry_points=[
            CommandHandler('support', support_command),
            CallbackQueryHandler(support_command, pattern='^ask_support$')
        ],
        states={
            WAITING_SUPPORT_MESSAGE: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    handle_support_message
                )
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_operation),
            CallbackQueryHandler(cancel_operation, pattern='^cancel_operation$')
        ],
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END
        },
        per_message=True
    )


async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['current_handler'] = 'support'

    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_operation')]
            ])
        )
    else:
        await update.message.reply_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É:",
            reply_markup=ReplyKeyboardRemove()
        )

    return WAITING_SUPPORT_MESSAGE


async def cancel_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    context.user_data.pop('support_started_from_button', None)

    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif update.message:
        await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    return ConversationHandler.END


async def start_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    context.user_data['awaiting_support'] = True

    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_support')]
            ])
        )
    else:
        await update.message.reply_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
            reply_markup=ReplyKeyboardRemove()
        )

    return WAITING_SUPPORT_MESSAGE


async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    try:
        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥
        context.user_data.pop('support_started_from_button', None)

        user = update.effective_user
        message_text = update.message.text

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç {user.full_name} (@{user.username}, ID: {user.id}):\n\n{message_text}"
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!",
            reply_markup=ReplyKeyboardRemove()
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    return ConversationHandler.END

async def withdraw_items_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if not users_db[user_id]["inventory"]:
        await query.edit_message_text(
            "‚ùå –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
            ]))
        return

    if user_id in TRADE_LINK:
        await withdraw_items_start(update, context)
        return

    await query.edit_message_text(
        "üì§ –î–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É Steam:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]))
    return ENTER_TRADE_LINK

async def withdraw_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    item_index = int(query.data.split('_')[1])
    item, rarity, value, *_ = users_db[user_id]["inventory"].pop(item_index)
    save_data(data)


async def enter_trade_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    trade_link = update.message.text

    if "steamcommunity.com/tradeoffer" not in trade_link:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞! –ü—Ä–∏–º–µ—Ä: https://steamcommunity.com/tradeoffer/...",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
            ]))
        return ENTER_TRADE_LINK

    TRADE_LINK[user_id] = trade_link
    data['trade_links'] = TRADE_LINK
    save_data(data)

    await update.message.reply_text(
        "‚úÖ –¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üì§ –í—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data='withdraw_items')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]))
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)
    return ConversationHandler.END

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    keyboard = [
        [InlineKeyboardButton("üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å", callback_data='select_case')],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
         InlineKeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data='inventory')],
        [InlineKeyboardButton("üì§ –í—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data='withdraw_items')],  # –¢–µ–ø–µ—Ä—å –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
        [InlineKeyboardButton("üé∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data='daily_bonus')],
        [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data='help')],
    ]

    await safe_edit_or_send_text(
        query,
        context,
        "üî´ CS2 Case Bot\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']}‚ÇΩ\n"
        f"üì¶ –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {len(users_db[user_id]['inventory'])}",
        reply_markup=InlineKeyboardMarkup(keyboard))



async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if user_id not in users_db:
        users_db[user_id] = {"balance": 0, "inventory": []}
        save_data(data)

    keyboard = [
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]

    await query.edit_message_text(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']}‚ÇΩ\n"
        f"üì¶ –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {len(users_db[user_id]['inventory'])}",
        reply_markup=InlineKeyboardMarkup(keyboard))


async def deposit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['current_handler'] = 'deposit'

    await query.edit_message_text(
        "üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 10 –¥–æ 100000‚ÇΩ):",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_operation')]
        ])
    )
    return WAITING_DEPOSIT_AMOUNT

async def open_case(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    case_name = query.data.split('_', 2)[2]
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–µ–π—Å: {case_name}")  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–µ–π—Å–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ CASES
    if case_name not in CASES:
        await safe_edit_or_send_text(
            query,
            context,
            f"‚ùå –ö–µ–π—Å '{case_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=None
        )
        return

    case_data = CASES[case_name]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if users_db[user_id]["balance"] < case_data["price"]:
        await safe_edit_or_send_text(
            query,
            context,
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {case_data['price']}‚ÇΩ",
            reply_markup=None
        )
        return

    # –°–Ω–∏–º–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞ —Å–æ —Å—á–µ—Ç–∞
    users_db[user_id]["balance"] -= case_data["price"]

    items = case_data["items"]
    weights = [RARITIES[item[1]]["chance"] for item in items]

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
    selected_item = random.choices(items, weights=weights, k=1)[0]
    name, rarity, value, image_url = selected_item

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    users_db[user_id]["inventory"].append((name, rarity, value, image_url))
    save_data(data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=image_url,
        caption=(
            f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–∑ {case_name}:\n"
            f"{rarity} {name}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {value}‚ÇΩ\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']}‚ÇΩ\n"
            f"üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {len(users_db[user_id]['inventory'])} –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
        ),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f'open_case_{case_name}')],
            [InlineKeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data='new_inventory')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ])
    )


async def show_inventory_from_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞"""
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.edit_message_reply_markup(reply_markup=None)

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—ë–º
    await send_inventory_message(update.effective_chat.id, context)


async def send_inventory_message(chat_id, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—ë–º"""
    user_id = context._user_id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    inventory = users_db[user_id]["inventory"]

    if not inventory:
        await context.bot.send_message(
            chat_id=chat_id,
            text="üì¶ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
            ])
        )
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–∞ —á–∞—Å—Ç–∏
    chunk_size = 15
    chunks = [inventory[i:i + chunk_size] for i in range(0, len(inventory), chunk_size)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await send_inventory_page(chat_id, context, chunks, 0)


async def send_inventory_page(chat_id, context, chunks, page):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    text = f"üì¶ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{len(chunks)}):\n\n"
    for idx, item in enumerate(chunks[page], 1):
        name, rarity, value, *_ = item
        text += f"{idx}. {name} ({rarity}) ‚Äî {value}‚ÇΩ\n"

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons = []
    if len(chunks) > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'inv_page_{page - 1}'))
        nav_buttons.append(InlineKeyboardButton(f"{page + 1}/{len(chunks)}", callback_data='page_info'))
        if page < len(chunks) - 1:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f'inv_page_{page + 1}'))
        buttons.append(nav_buttons)

    buttons.extend([
        [InlineKeyboardButton("üíµ –ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ", callback_data='sell_all')],
        [InlineKeyboardButton("üîé –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data='select_items')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def safe_edit_or_send_text(query, context, text, reply_markup=None):
    try:
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    except telegram.error.BadRequest as e:
        if "message to edit" in str(e):
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=text,
                reply_markup=reply_markup)
        else:
            raise
# ... (–≤—Å–µ –≤–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ show_inventory) ...

async def show_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    inventory = users_db[user_id]["inventory"]
    if not inventory:
        await query.edit_message_text(
            "üì¶ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
            ])
        )
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 20 –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    chunk_size = 20
    inventory_chunks = [inventory[i:i + chunk_size] for i in range(0, len(inventory), chunk_size)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
    await send_inventory_chunk(query, context, inventory_chunks, 0)


async def handle_inventory_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    page_index = int(query.data.split('_')[2])
    inventory = users_db[user_id]["inventory"]
    chunk_size = 20
    chunks = [inventory[i:i + chunk_size] for i in range(0, len(inventory), chunk_size)]

    await send_inventory_chunk(query, context, chunks, page_index)


async def send_inventory_chunk(query, context, chunks, chunk_index):
    current_chunk = chunks[chunk_index]
    text = "üì¶ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n"

    for idx, (item, rarity, value, *_) in enumerate(current_chunk, 1):
        text += f"{idx}. {item} ({rarity}) ‚Äî {value}‚ÇΩ\n"

    keyboard = []
    if len(chunks) > 1:
        if chunk_index > 0:
            keyboard.append(
                [InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'inv_page_{chunk_index - 1}')])
        if chunk_index < len(chunks) - 1:
            keyboard.append(
                [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'inv_page_{chunk_index + 1}')])

    keyboard.extend([
        [InlineKeyboardButton("üíµ –ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ", callback_data='sell_all')],
        [InlineKeyboardButton("üîé –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data='select_items_to_sell')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def toggle_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    item_index = int(query.data.split('_')[1])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    selected_items = context.user_data.setdefault('selected_items', [])

    if item_index in selected_items:
        selected_items.remove(item_index)
    else:
        selected_items.append(item_index)

    # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞
    inventory = users_db[user_id]["inventory"]
    keyboard = []
    for idx, (item, rarity, value, *_) in enumerate(inventory, 1):
        is_selected = (idx - 1) in selected_items
        emoji = "‚úÖ" if is_selected else "‚ùå"
        keyboard.append([InlineKeyboardButton(
            f"{emoji} {idx}. {item} ({value}‚ÇΩ)",
            callback_data=f'toggle_{idx - 1}'
        )])

    keyboard.append([InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ", callback_data='confirm_sell')])
    keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='inventory')])

    await query.edit_message_text(
        "üîé –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å):",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELL_SELECTED

async def confirm_sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if 'selected_items' not in context.user_data or not context.user_data['selected_items']:
        await query.edit_message_text(
            "‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='select_items_to_sell')]
            ])
        )
        return SELL_SELECTED

    total = 0
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    for index in sorted(context.user_data['selected_items'], reverse=True):
        if 0 <= index < len(users_db[user_id]["inventory"]):
            total += users_db[user_id]["inventory"][index][2]
            del users_db[user_id]["inventory"][index]

    users_db[user_id]["balance"] += total
    save_data(data)
    context.user_data['selected_items'] = []  # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä

    await query.edit_message_text(
        f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É: {total}‚ÇΩ\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']}‚ÇΩ",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data='inventory')]
        ])
    )
    return ConversationHandler.END


async def select_items_to_sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    context.user_data.setdefault('selected_items', [])
    inventory = users_db[user_id]["inventory"]

    if not inventory:
        await query.edit_message_text(
            "‚ùå –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='inventory')]
            ])
        )
        return ConversationHandler.END

    keyboard = []
    for idx, (item, rarity, value, *_) in enumerate(inventory, 1):
        is_selected = (idx - 1) in context.user_data['selected_items']
        emoji = "‚úÖ" if is_selected else "‚ùå"
        keyboard.append([InlineKeyboardButton(
            f"{emoji} {idx}. {item} ({value}‚ÇΩ)",
            callback_data=f'toggle_{idx - 1}'
        )])

    keyboard.append([InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ", callback_data='confirm_sell')])
    keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='inventory')])

    await query.edit_message_text(
        "üîé –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELL_SELECTED

async def sell_all_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    total = sum(item[2] for item in users_db[user_id]["inventory"])
    users_db[user_id]["balance"] += total
    users_db[user_id]["inventory"] = []
    save_data(data)

    await query.edit_message_text(
        f"‚úÖ –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–æ–¥–∞–Ω—ã –∑–∞ {total}‚ÇΩ\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']}‚ÇΩ",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_menu')]
        ])
    )
    return ConversationHandler.END


async def daily_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    now = time.time()
    last_bonus = LAST_DAILY_BONUS.get(user_id, 0)

    if now - last_bonus < 24 * 60 * 60:  # 24 —á–∞—Å–∞
        await query.edit_message_text(
            "‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!\n"
            "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
            ])
        )
        return

    bonus = random.randint(50, 300)
    users_db[user_id]["balance"] += bonus
    LAST_DAILY_BONUS[user_id] = now
    data['last_daily_bonus'] = LAST_DAILY_BONUS
    save_data(data)

    await query.edit_message_text(
        f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: {bonus}‚ÇΩ\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']}‚ÇΩ",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_menu')]
        ])
    )


async def handle_unexpected_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_handler = context.user_data.get('current_handler')

    if current_handler == 'deposit':
        return await process_deposit(update, context)
    elif current_handler == 'support':
        return await handle_support_message(update, context)

    await update.message.reply_text(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardRemove()
    )


async def cancel_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    elif update.message:
        await update.message.reply_text("‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    help_text = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å - –ø–æ–∫—É–ø–∞–π—Ç–µ –∫–µ–π—Å—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
        "üí∞ –ë–∞–ª–∞–Ω—Å - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
        "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
        "üíµ –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã - –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è\n"
        "üì§ –í—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ - –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ Steam\n"
        "üé∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å - –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @jkss_onion"
    )

    await query.edit_message_text(
        help_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ])
    )


async def support_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    context.user_data['support_started_from_button'] = True

    await query.edit_message_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_support')]
        ])
    )
    return WAITING_SUPPORT_MESSAGE

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    if 'awaiting_support' in context.user_data:
        return await cancel_support(update, context)

    await update.message.reply_text(
        "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END




async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if update.effective_user.id != ADMIN_ID:
        return

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return

    user_id = int(context.args[0])
    message = " ".join(context.args[1:])

    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message}"
        )
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("support", start_support))
    application.add_handler(CommandHandler("reply", admin_reply))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(select_case, pattern='^select_case$'))
    application.add_handler(CallbackQueryHandler(open_case, pattern='^open_case_'))
    application.add_handler(CallbackQueryHandler(show_inventory, pattern='^inventory$'))
    application.add_handler(CallbackQueryHandler(show_balance, pattern='^balance$'))
    application.add_handler(CallbackQueryHandler(daily_bonus, pattern='^daily_bonus$'))
    application.add_handler(CallbackQueryHandler(help_command, pattern='^help$'))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern='^back_to_menu$'))
    application.add_handler(CallbackQueryHandler(sell_all_items, pattern='^sell_all$'))
    application.add_handler(CallbackQueryHandler(handle_inventory_page, pattern='^inv_page_'))
    application.add_handler(CallbackQueryHandler(show_inventory_from_photo, pattern='^new_inventory$'))
    application.add_handler(CallbackQueryHandler(support_button, pattern='^ask_support$'))
    application.add_handler(CallbackQueryHandler(cancel_support, pattern='^cancel_support$'))
    application.add_handler(CommandHandler("cancel", cancel_command))
    application.add_handler(CallbackQueryHandler(select_case, pattern='^select_case$'))

    deposit_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(deposit_start, pattern='^deposit$')],
        states={
            ENTER_DEPOSIT_AMOUNT: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    process_deposit
                )
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_deposit),
            CallbackQueryHandler(cancel_deposit, pattern='^cancel_deposit$')
        ],
        per_message=True,
        allow_reentry=True
    )


    support_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('support', start_support),
            CallbackQueryHandler(start_support, pattern='^ask_support$')
        ],
        states={
            WAITING_SUPPORT_MESSAGE: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    handle_support_message
                )
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_support),
            CallbackQueryHandler(cancel_support, pattern='^cancel_support$'),
            MessageHandler(filters.REPLY, handle_support_message)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-—Å–æ–æ–±—â–µ–Ω–∏–π
        ],
        per_message=True,
        allow_reentry=True
    )
    # –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏!
    application.add_handler(support_conv_handler)



    withdraw_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(withdraw_items_start, pattern='^withdraw_items$')],
        states={
            ENTER_TRADE_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_trade_link)],
            SELECT_ITEM: [CallbackQueryHandler(withdraw_item, pattern='^withdraw_')],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=True
    )

    support_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('support', start_support),
            CallbackQueryHandler(support_button, pattern='^ask_support$')  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ support_button
        ],
        states={
            WAITING_SUPPORT_MESSAGE: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    handle_support_message
                )
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_support),
            CallbackQueryHandler(cancel_support, pattern='^cancel_support$')
        ],
        per_message=True,
        allow_reentry=True
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(deposit_conv_handler)
    application.add_handler(withdraw_conv_handler)
    application.add_handler(support_conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unexpected_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()

